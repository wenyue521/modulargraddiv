//这里是实现经典Projection-in-time-modular-grad-div
//这里主要测试求解器用时


real epsi = 1.0e-6;
real nu = 1.0e-3;
real Nu = 0.2;//grad-div稳定化参数

real T = 1.;

int MM = 1;
real[int] time(MM);
  
for(int kk =1; kk<= MM;kk++){
real beta = 0.04;//时间导数项上的grad-div稳定化参数


int NN = 32;//网格剖分
real h = 1./NN; //固定网格尺寸 
 
real dt = 1./(NN ); //时间要选取dt=h^2为了保证相同的收敛阶


mesh Th = square(NN,NN);
fespace Vh(Th,P2); 
fespace Mh(Th,P1);

Vh u1,u2,uu1,uu2,uuu1,uuu2;//end速度,第一个中间速度,第二个中间速度
Vh u01,u02;//初始值以及存储modular-grad-div处理后的结果因为对流项要用
Vh v1,v2;
Vh u1old, u2old;//end-velocity
Vh bu1,bu2;//速度边界条件


Mh p,p0,pCor,q;//压力，压力初始值，压力校正量
Mh pold;
Mh bp;//压力的边界条件





real t = 0;

//边界为0
//func real u1ee(real t){
//return sin(t)*sin(pi*x)*sin(pi*x)*sin(2*pi*y);
//}

//func real u2ee(real t){
//return -sin(t)*sin(2*pi*x)*sin(pi*y)*sin(pi*y);
//}

//func real pee(real t){
//return sin(t)*(sin(pi*y)- 2./pi);
//}


//算例3
func real u1ee(real t){
return 1.6*( 6+ 4*cos(4*t) )*sin(pi*x) *sin(pi*x)*y*(y-1)*(2*y-1);
}

func real u2ee(real t){
return -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* y^2 *(y-1)^2;
}

func real pee(real t){
return 0.1*( 6+ 4*cos(4*t) )*sin(pi*x)*cos(pi*y);
}



u01 = u1ee(0); u02 = u2ee(0);//initial value
u1old = u1ee(0); u2old = u2ee(0);//initial value
p0 = pee(0);
pold = pee(0);

real cpu1 = clock();

for(int k = 1;k <= T/dt;k++){
t = k*dt;

//边界为0
//func u1e = sin(t)*sin(pi*x)*sin(pi*x)*sin(2*pi*y);
//func u2e = -sin(t)*sin(2*pi*x)*sin(pi*y)*sin(pi*y);
//func pe = sin(t)*(sin(pi*y)- 2./pi);

//func u1x = 2*pi*sin(t)*cos(pi*x)*sin(pi*x)*sin(2*pi*y);
//func u1y = 2*pi*sin(t)*sin(pi*x)*sin(pi*x)*cos(2*pi*y);

//func u2x = -2*pi*sin(t)*cos(2*pi*x)*sin(pi*y)*sin(pi*y);
//func u2y = -2*pi*sin(t)*sin(2*pi*x)*sin(pi*y)*cos(pi*y);

//func pex = 0;
//func pey = sin(t)*pi*cos(pi*y);

//func f1 = cos(t)*sin(pi*x)*sin(pi*x)*sin(2*pi*y) - nu*2*pi*sin(t)*sin(2*pi*y)*(pi*cos(pi*x)*cos(pi*x) - pi*sin(pi*x)*sin(pi*x) -2*pi*sin(2*pi*y)) + (sin(t)*sin(pi*x)*sin(pi*x)*sin(2*pi*y))*(2*pi*sin(t)*cos(pi*x)*sin(pi*x)*sin(2*pi*y) ) + (-sin(t)*sin(2*pi*x)*sin(pi*y)*sin(pi*y) )*(2*pi*sin(t)*sin(pi*x)*sin(pi*x)*cos(2*pi*y) );   
//func f2 = -cos(t)*sin(2*pi*x)*sin(pi*y)*sin(pi*y) - nu*2*pi*sin(t)*sin(2*pi*x)*( 2*pi*sin(pi*y)*sin(pi*y) -pi*(cos(pi*y)*cos(pi*y)) - sin(pi*y)*sin(pi*y)  ) + (sin(t)*sin(pi*x)*sin(pi*x)*sin(2*pi*y) )*(-2*pi*sin(t)*cos(2*pi*x)*sin(pi*y)*sin(pi*y) ) + (-sin(t)*sin(2*pi*x)*sin(pi*y)*sin(pi*y) )*(-2*pi*sin(t)*sin(2*pi*x)*sin(pi*y)*cos(pi*y) ) + sin(t)*pi*cos(pi*y);

//算例3
func u1e = 1.6*( 6+ 4*cos(4*t) )*sin(pi*x) *sin(pi*x)*y*(y-1)*(2*y-1);
func u2e = -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* y^2 *(y-1)^2;
func pe = 0.1*( 6+ 4*cos(4*t) )*sin(pi*x)*cos(pi*y);

func u1x = 1.6*( 6+ 4*cos(4*t) )*y*(y-1)*(2*y-1)*( 2*sin(pi*x)*pi*cos(pi*x) );
func u1y = 1.6*( 6+ 4*cos(4*t) )*sin(pi*x)*sin(pi*x) *( (2*y -1)*(2*y -1)+ (y^2 -y)*2 );

func u2x = -0.8*pi*( 6+ 4*cos(4*t) )* y^2 *(y-1)^2 *( 2*pi*cos(2*pi*x) );
func u2y = -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* ( 2*y*(y-1)^2 + y^2 *2*(y-1) );

func f1 = 1.6*( -4*4*sin(4*t) )*sin(pi*x) *sin(pi*x)*y*(y-1)*(2*y-1) + 0.1*( 6+ 4*cos(4*t) )*pi*cos(pi*x)*cos(pi*y) - nu*( 1.6*( 6+ 4*cos(4*t) )*y*(y-1)*(2*y-1)*( 2*pi*pi*cos(2*pi*x)  ) ) -nu*1.6*( 6+ 4*cos(4*t) )*sin(pi*x)*sin(pi*x) *( 8*y -4 + 2*(2*y-1) ) + ( 1.6*( 6+ 4*cos(4*t) )*sin(pi*x) *sin(pi*x)*y*(y-1)*(2*y-1) )*( 1.6*( 6+ 4*cos(4*t) )*y*(y-1)*(2*y-1)*( 2*sin(pi*x)*pi*cos(pi*x) ) ) + ( -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* y^2 *(y-1)^2 )*( 1.6*( 6+ 4*cos(4*t) )*sin(pi*x)*sin(pi*x) *( (2*y -1)*(2*y -1)+ (y^2 -y)*2 ) ); 
func f2 = -0.8*pi*( -4*4*sin(4*t) )*sin(2*pi*x)* y^2 *(y-1)^2 - 0.1*( 6+ 4*cos(4*t) )*sin(pi*x)*pi*sin(pi*y) -nu*( -0.8*pi*( 6+ 4*cos(4*t) )* y^2 *(y-1)^2 *( -2*pi*2*pi*sin(2*pi*x) ) ) -nu*( -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* ( 2*(y-1)^2 + 4*y*(y-1) + 4*y*(y-1) + 2*y^2 ) ) + ( 1.6*( 6+ 4*cos(4*t) )*sin(pi*x) *sin(pi*x)*y*(y-1)*(2*y-1) )*( -0.8*pi*( 6+ 4*cos(4*t) )* y^2 *(y-1)^2 *( 2*pi*cos(2*pi*x) ) ) + ( -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* y^2 *(y-1)^2 )*( -0.8*pi*( 6+ 4*cos(4*t) )*sin(2*pi*x)* ( 2*y*(y-1)^2 + y^2 *2*(y-1) ) );




//按分量定义问题
problem proMgdu1(uu1,v1,solver = GMRES,eps = 1.0e-6 ) = 
   int2d(Th)(1./dt *(uu1*v1))
   +int2d(Th)(nu *( dx(uu1)*dx(v1) + dy(uu1)*dy(v1) ))
   +int2d(Th)( (u01*dx(uu1) + u02*dy(uu1))*v1 )
   +int2d(Th)( 1./2 *(dx(u01) + dy(u02))*uu1*v1 )
   -int2d(Th)( 1./dt *(u1old*v1) )
   -int2d(Th)(f1*v1 )
   +on(1,2,3,4,uu1 = 0);

problem proMgdu2(uu2,v1,solver = GMRES,eps = 1.0e-6 ) = 
   int2d(Th)(1./dt *(uu2*v1))
   +int2d(Th)(nu *( dx(uu2)*dx(v1) + dy(uu2)*dy(v1) ))
   +int2d(Th)( (u01*dx(uu2) + u02*dy(uu2))*v1 )
   +int2d(Th)( 1./2 *(dx(u01) + dy(u02))*uu2*v1 )
   -int2d(Th)( 1./dt *(u2old*v1) )
   -int2d(Th)(f2*v1 )
   +on(1,2,3,4,uu2 = 0);



//形成压力的椭圆方程，需要特别注意边界条件的处理
problem proMgdp(p,q,solver = UMFPACK,init = 1) = 
   int2d(Th)( dx(p)*dx(q) + dy(p)*dy(q) )
   +int2d(Th)(1./dt *( dx(uuu1) + dy(uuu2) )*q )//施加齐次Neumann边界条件
   //+on(3,p = bp)//注意这里施加的边界条件
   ;


//使用Modular grad-div稳定化
problem proMgdendu([uuu1,uuu2],[v1,v2], solver = UMFPACK, init = 1 ) = 
   int2d(Th)( uuu1*v1 + uuu2*v2 )
   +int2d(Th)( (beta + Nu*dt)*(dx(uuu1)*dx(v1) + dy(uuu2)*dx(v1) + dx(uuu1)*dy(v2) + dy(uuu2)*dy(v2)) )
   -int2d(Th)( uu1*v1 + uu2*v2 )
   -int2d(Th)( beta*(dx(u01)*dx(v1) + dy(u02)*dx(v1) + dx(u01)*dy(v2) + dy(u02)*dy(v2)) )
   +on(1,2,3,4,uuu1 = 0,uuu2 = 0);//施加边界条件


proMgdu1;
proMgdu2;
proMgdendu;//Modular grad-div操作
proMgdp;

p = p - int2d(Th)(p);//后处理使压力均值为0;

u1 = uuu1 - dt*dx(p);//计算end-velocity
u2 = uuu2 - dt*dy(p);//计算end-velocity


u1old = u1;
u2old = u2;
u01 = uuu1;//传递modular处理后的结果
u02 = uuu2;//传递modular处理后的值


}//时间循环结束


time[kk-1] = clock() - cpu1;


}//空间循环结束


for(int i=0;i<=MM-1;i++){
cout<<"time: "<< time[i]<<endl;
}



